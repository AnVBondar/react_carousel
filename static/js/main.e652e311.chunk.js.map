{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","position","chain","images","imgWidth","frameWidth","scrollStep","animation","infinite","useState","scrollImage","setScrollImage","finalPosition","checkPosition","direction","scrollRight","scrollLeft","styles","carouselListContainer","width","carouselList","transition","transform","className","style","map","img","imgIndex","src","alt","String","type","onClick","disabled","isActiveRightButton","App","state","frameSize","step","animationDuration","handleInputChange","event","target","name","value","checked","inputValue","Number","setState","this","mainPageBoxWidth","length","htmlFor","id","onChange","min","max","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e652e311.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  imgWidth: number;\n  frameWidth: number;\n  scrollStep: number;\n  animation: number;\n  infinite: boolean;\n};\n\ntype CheckPosition = (\n  direction: 'right' | 'left',\n  chain: boolean,\n) => void;\n\ntype ActiveButton = (\n  position: number,\n  chain: boolean,\n) => boolean;\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  imgWidth,\n  frameWidth,\n  scrollStep,\n  animation,\n  infinite,\n}) => {\n  const [scrollImage, setScrollImage] = useState(0);\n  const frameWidthValue = frameWidth * imgWidth;\n  const finalPosition = -130 * (10 - frameWidth);\n\n  const checkPosition: CheckPosition = (direction, chain) => {\n    if (direction === 'right') {\n      const scrollRight = scrollImage + (0 - scrollStep * imgWidth);\n\n      if (chain && scrollImage === finalPosition) {\n        setScrollImage(0);\n\n        return;\n      }\n\n      if (scrollRight < finalPosition) {\n        setScrollImage(finalPosition);\n      } else {\n        setScrollImage(scrollRight);\n      }\n    }\n\n    if (direction === 'left') {\n      const scrollLeft = scrollImage + scrollStep * imgWidth;\n\n      if (chain && scrollImage === 0) {\n        setScrollImage(finalPosition);\n\n        return;\n      }\n\n      if (scrollLeft > 0) {\n        setScrollImage(0);\n      } else {\n        setScrollImage(scrollLeft);\n      }\n    }\n  };\n\n  const isActiveLeftButton: ActiveButton = (position, chain) => {\n    if (chain) {\n      return false;\n    }\n\n    if (position === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isActiveRightButton: ActiveButton = (position, chain) => {\n    if (chain) {\n      return false;\n    }\n\n    if (position === finalPosition) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const styles = {\n    carouselListContainer: {\n      width: `${frameWidthValue}px`,\n    },\n    carouselList: {\n      transition: `transform ${animation}ms ease-in-out`,\n      transform: `translateX(${scrollImage}px)`,\n    },\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__list-container\"\n        style={styles.carouselListContainer}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={styles.carouselList}\n        >\n          {images.map((img, imgIndex) => (\n            <li key={img}>\n              <img\n                style={{ width: imgWidth }}\n                src={img}\n                alt={String(imgIndex + 1)}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"button-container\">\n        <button\n          type=\"button\"\n          onClick={() => checkPosition('left', infinite)}\n          disabled={isActiveLeftButton(scrollImage, infinite)}\n        >\n          Prev\n        </button>\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          onClick={() => checkPosition('right', infinite)}\n          disabled={isActiveRightButton(scrollImage, infinite)}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  width: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    width: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      name,\n      value,\n      type,\n      checked,\n    } = event.target;\n    const inputValue = type === 'checkbox' ? checked : Number(value);\n\n    this.setState({\n      [name]: inputValue,\n    } as unknown as Pick<State, keyof State>);\n  };\n\n  render() {\n    const {\n      images,\n      width,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const mainPageBoxWidth = width * frameSize;\n\n    return (\n      <div className=\"App\" style={{ width: mainPageBoxWidth }}>\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n        <div className=\"inputContainer\">\n          <label htmlFor=\"width\" className=\"input-wrapp\">\n            Image size (px):\n            <input\n              type=\"number\"\n              name=\"width\"\n              id=\"width\"\n              value={width}\n              onChange={this.handleInputChange}\n              min={130}\n              max={230}\n            />\n          </label>\n          <label htmlFor=\"frameSize\" className=\"input-wrapp\">\n            Frame size (px):\n            <input\n              type=\"number\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              value={frameSize}\n              onChange={this.handleInputChange}\n              min={1}\n              max={10}\n            />\n          </label>\n          <label htmlFor=\"step\" className=\"input-wrapp\">\n            Step:\n            <input\n              type=\"number\"\n              name=\"step\"\n              id=\"step\"\n              onChange={this.handleInputChange}\n              value={step}\n              min={1}\n              max={10}\n            />\n          </label>\n          <label htmlFor=\"animationDuration\" className=\"input-wrapp\">\n            Animation duration (ms):\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              value={animationDuration}\n              step=\"100\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label htmlFor=\"infinite\" className=\"input-wrapp\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              name=\"infinite\"\n              checked={infinite}\n              onChange={this.handleInputChange}\n            />\n          </label>\n        </div>\n        <Carousel\n          images={images}\n          imgWidth={width}\n          frameWidth={frameSize}\n          scrollStep={step}\n          animation={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}